function add(a, b) {
  return a + b;
}

class Calculator2 {
  multiply(a, b) {
    return a * b;
  }
}

// Что было плохо и почему?
// Отсутствие типизации
// Функция и класс реализуют методы по разному, что может усложнить их использование и поддержку
// Отсутствие документации

// class Calculator {
//   /**
//    * Возвращает сумму двух чисел
//    * @param a - Первое число
//    * @param b - Второе число
//    * @returns Сумма двух чисел
//    */
//   public add(a: number, b: number): number {
//     if (typeof a !== 'number' || typeof b !== 'number') {
//       throw new Error("Both arguments must be numbers.");
//     }
//     return a + b;
//   }
//
//   /**
//    * Возвращает произведение двух чисел
//    * @param a - Первое число
//    * @param b - Второе число
//    * @returns Произведение двух чисел
//    */
//   public multiply(a: number, b: number): number {
//     if (typeof a !== 'number' || typeof b !== 'number') {
//       throw new Error("Both arguments must be numbers.");
//     }
//     return a * b;
//   }
// }

// Что стало лучше и почему?
// Указание типов для параметров и возвращаемых значений делает код более надёжным и уменьшает вероятность ошибок
// Интеграция функций в класс Calculator обеспечивает единый интерфейс для выполнения математических операций, что упрощает использование и расширение
// Добавление комментариев делает код более понятным и облегчает его поддержку, предоставляя информацию о назначении и использовании методов